import os
import logging
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, ConversationHandler, CallbackContext
from flask import Flask
import threading

# –°–æ–∑–¥–∞–µ–º Flask app –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
app = Flask(__name__)

@app.route('/')
def home():
    return "ü§ñ –ë–æ—Ç –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Render! " + datetime.now().strftime('%Y-%m-%d %H:%M:%S')

@app.route('/health')
def health():
    return "OK", 200

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
NAME, CONTACT, PROBLEM, DATETIME, CONFIRM = range(5)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
def get_moscow_time():
    utc_now = datetime.utcnow()
    moscow_time = utc_now + timedelta(hours=3)
    return moscow_time

def format_moscow_time():
    return get_moscow_time().strftime('%d.%m.%Y %H:%M:%S (–ú–°–ö)')

# –î–∞–Ω–Ω—ã–µ –±–æ—Ç–∞
BOT_TOKEN = os.environ.get('BOT_TOKEN', '8287276471:AAEfJuB-8GVERNkrnW4thGdU4B6JpnN4rmM')
ADMIN_CHAT_ID = os.environ.get('ADMIN_CHAT_ID', '744451342')

WELCOME_PHOTO_URL = "https://i.ibb.co/yFdZ673f/Advocate.jpg"

def start(update: Update, context: CallbackContext):
    context.user_data['first_click'] = True

    try:
        update.message.reply_photo(
            photo=WELCOME_PHOTO_URL,
            caption="üëã –ü—Ä–∏–≤–µ—Ç, —è –ê—Ä–∏–Ω–∞ - –±–æ—Ç –∞–¥–≤–æ–∫–∞—Ç–∞ –ê–ª–µ–∫—Å–µ—è –ú–µ–ª—å–Ω–∏–∫–æ–≤–∞. –Ø –ø–æ–º–æ–≥—É –í–∞–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"
        )
    except Exception as e:
        update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç, —è –ê—Ä–∏–Ω–∞ - –±–æ—Ç –∞–¥–≤–æ–∫–∞—Ç–∞ –ê–ª–µ–∫—Å–µ—è –ú–µ–ª—å–Ω–∏–∫–æ–≤–∞. –Ø –ø–æ–º–æ–≥—É –í–∞–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"
        )

    keyboard = [[KeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    update.message.reply_text(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏:",
        reply_markup=reply_markup)

def handle_application_button(update: Update, context: CallbackContext) -> int:
    is_first_click = context.user_data.get('first_click', True)

    if is_first_click:
        context.user_data['first_click'] = False
        update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –∑–∞—è–≤–∫—É –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.\n\nüìù –ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è? (–§–ò–û –∏–ª–∏ –∏–º—è)",
            reply_markup=ReplyKeyboardRemove())
    else:
        try:
            update.message.reply_photo(
                photo=WELCOME_PHOTO_URL,
                caption="üëã –°–Ω–æ–≤–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ó–∞–ø–æ–ª–Ω–∏–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é")
        except Exception:
            update.message.reply_text("üëã –°–Ω–æ–≤–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ó–∞–ø–æ–ª–Ω–∏–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é")

        update.message.reply_text(
            "üìù –ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è? (–§–ò–û –∏–ª–∏ –∏–º—è)",
            reply_markup=ReplyKeyboardRemove())

    return NAME

def get_name(update: Update, context: CallbackContext) -> int:
    context.user_data['name'] = update.message.text
    update.message.reply_text("üìû –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏:")
    return CONTACT

def get_contact(update: Update, context: CallbackContext) -> int:
    context.user_data['contact'] = update.message.text
    update.message.reply_text("‚ùì –ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ —Å—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã:")
    return PROBLEM

def get_problem(update: Update, context: CallbackContext) -> int:
    context.user_data['problem'] = update.message.text
    update.message.reply_text("üìÖ –£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:")
    return DATETIME

def get_datetime(update: Update, context: CallbackContext) -> int:
    context.user_data['datetime'] = update.message.text

    name = context.user_data.get('name', '')
    contact = context.user_data.get('contact', '')
    problem = context.user_data.get('problem', '')

    summary = f"""üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –∑–∞—è–≤–∫—É:

üë§ –ò–º—è: {name}
üìû –ö–æ–Ω—Ç–∞–∫—Ç: {contact}
‚ùì –ü—Ä–æ–±–ª–µ–º–∞: {problem}
üìÖ –ñ–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è: {update.message.text}

–í—Å—ë –≤–µ—Ä–Ω–æ?"""

    keyboard = [['‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å', '‚ùå –ù–µ—Ç, –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ']]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)

    update.message.reply_text(summary, reply_markup=reply_markup)
    return CONFIRM

def confirm_application(update: Update, context: CallbackContext) -> int:
    user_choice = update.message.text

    if user_choice == '‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å':
        send_application_to_admin(update, context)
        context.user_data['first_click'] = False

        keyboard = [[KeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        update.message.reply_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!\n\n",
            reply_markup=reply_markup)

        for key in ['name', 'contact', 'problem', 'datetime']:
            if key in context.user_data:
                del context.user_data[key]

        return ConversationHandler.END
    else:
        update.message.reply_text("üîÑ –î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –∑–∞—è–≤–∫—É –∑–∞–Ω–æ–≤–æ.", reply_markup=ReplyKeyboardRemove())
        update.message.reply_text("üìù –ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è? (–§–ò–û –∏–ª–∏ –∏–º—è)")
        return NAME

def send_application_to_admin(update: Update, context: CallbackContext):
    user_data = context.user_data
    user = update.message.from_user

    application_text = f"""üö® –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Æ

üë§ –ö–ª–∏–µ–Ω—Ç: {user_data.get('name', '')}
üìû –ö–æ–Ω—Ç–∞–∫—Ç: {user_data.get('contact', '')}
‚ùì –ü—Ä–æ–±–ª–µ–º–∞: {user_data.get('problem', '')}
üìÖ –ñ–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è: {user_data.get('datetime', '')}

üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:
Username: @{user.username if user.username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}
–ü–æ–ª–Ω–æ–µ –∏–º—è: {user.first_name} {user.last_name or ''}

‚è∞ –í—Ä–µ–º—è –∑–∞—è–≤–∫–∏: {format_moscow_time()}"""

    try:
        context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=application_text)
        logger.info("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏: {e}")

def cancel(update: Update, context: CallbackContext) -> int:
    context.user_data['first_click'] = False
    keyboard = [[KeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    update.message.reply_text(
        '‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:',
        reply_markup=reply_markup)

    for key in ['name', 'contact', 'problem', 'datetime']:
        if key in context.user_data:
            del context.user_data[key]

    return ConversationHandler.END

def run_bot():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞ –Ω–∞ Render...")
    
    try:
        updater = Updater(BOT_TOKEN, use_context=True)
        
        conv_handler = ConversationHandler(
            entry_points=[
                CommandHandler('start', start),
                MessageHandler(Filters.text("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"), handle_application_button)
            ],
            states={
                NAME: [MessageHandler(Filters.text & ~Filters.command, get_name)],
                CONTACT: [MessageHandler(Filters.text & ~Filters.command, get_contact)],
                PROBLEM: [MessageHandler(Filters.text & ~Filters.command, get_problem)],
                DATETIME: [MessageHandler(Filters.text & ~Filters.command, get_datetime)],
                CONFIRM: [MessageHandler(Filters.text & ~Filters.command, confirm_application)],
            },
            fallbacks=[CommandHandler('cancel', cancel)],
        )
        
        updater.dispatcher.add_handler(CommandHandler("start", start))
        updater.dispatcher.add_handler(conv_handler)
        
        print("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Render!")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        updater.start_polling(drop_pending_updates=True)
        updater.idle()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    print("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –Ω–∞ Render...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = threading.Thread(target=run_bot, daemon=True)
    bot_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port, debug=False)
